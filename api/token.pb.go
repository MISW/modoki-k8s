// Code generated by protoc-gen-go. DO NOT EDIT.
// source: token.proto

package modoki

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type IssueTokenRequest struct {
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *IssueTokenRequest) Reset()                    { *m = IssueTokenRequest{} }
func (m *IssueTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*IssueTokenRequest) ProtoMessage()               {}
func (*IssueTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *IssueTokenRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type IssueTokenResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *IssueTokenResponse) Reset()                    { *m = IssueTokenResponse{} }
func (m *IssueTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*IssueTokenResponse) ProtoMessage()               {}
func (*IssueTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *IssueTokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ValidateTokenRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *ValidateTokenRequest) Reset()                    { *m = ValidateTokenRequest{} }
func (m *ValidateTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidateTokenRequest) ProtoMessage()               {}
func (*ValidateTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *ValidateTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ValidateTokenResponse struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	CreatedBy string `protobuf:"bytes,3,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
}

func (m *ValidateTokenResponse) Reset()                    { *m = ValidateTokenResponse{} }
func (m *ValidateTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*ValidateTokenResponse) ProtoMessage()               {}
func (*ValidateTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *ValidateTokenResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ValidateTokenResponse) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ValidateTokenResponse) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func init() {
	proto.RegisterType((*IssueTokenRequest)(nil), "modoki.IssueTokenRequest")
	proto.RegisterType((*IssueTokenResponse)(nil), "modoki.IssueTokenResponse")
	proto.RegisterType((*ValidateTokenRequest)(nil), "modoki.ValidateTokenRequest")
	proto.RegisterType((*ValidateTokenResponse)(nil), "modoki.ValidateTokenResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Token service

type TokenClient interface {
	IssueToken(ctx context.Context, in *IssueTokenRequest, opts ...grpc.CallOption) (*IssueTokenResponse, error)
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
}

type tokenClient struct {
	cc *grpc.ClientConn
}

func NewTokenClient(cc *grpc.ClientConn) TokenClient {
	return &tokenClient{cc}
}

func (c *tokenClient) IssueToken(ctx context.Context, in *IssueTokenRequest, opts ...grpc.CallOption) (*IssueTokenResponse, error) {
	out := new(IssueTokenResponse)
	err := grpc.Invoke(ctx, "/modoki.Token/IssueToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	out := new(ValidateTokenResponse)
	err := grpc.Invoke(ctx, "/modoki.Token/ValidateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Token service

type TokenServer interface {
	IssueToken(context.Context, *IssueTokenRequest) (*IssueTokenResponse, error)
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
}

func RegisterTokenServer(s *grpc.Server, srv TokenServer) {
	s.RegisterService(&_Token_serviceDesc, srv)
}

func _Token_IssueToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).IssueToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modoki.Token/IssueToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).IssueToken(ctx, req.(*IssueTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modoki.Token/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Token_serviceDesc = grpc.ServiceDesc{
	ServiceName: "modoki.Token",
	HandlerType: (*TokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssueToken",
			Handler:    _Token_IssueToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _Token_ValidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token.proto",
}

func init() { proto.RegisterFile("token.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xc9, 0xcf, 0x4e,
	0xcd, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcb, 0xcd, 0x4f, 0xc9, 0xcf, 0xce, 0x54,
	0x52, 0xe7, 0x12, 0xf4, 0x2c, 0x2e, 0x2e, 0x4d, 0x0d, 0x01, 0xc9, 0x05, 0xa5, 0x16, 0x96, 0xa6,
	0x16, 0x97, 0x08, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x70,
	0x06, 0x81, 0xd9, 0x4a, 0x5a, 0x5c, 0x42, 0xc8, 0x0a, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85,
	0x44, 0xb8, 0x58, 0xc1, 0xa6, 0x4a, 0x30, 0x82, 0x95, 0x42, 0x38, 0x4a, 0x3a, 0x5c, 0x22, 0x61,
	0x89, 0x39, 0x99, 0x29, 0x89, 0x25, 0xa8, 0xe6, 0x62, 0x57, 0x9d, 0xcc, 0x25, 0x8a, 0xa6, 0x1a,
	0x6a, 0x38, 0xcc, 0x19, 0x8c, 0x08, 0x67, 0x08, 0x89, 0x73, 0xb1, 0x97, 0x16, 0xa7, 0x16, 0xc5,
	0x67, 0xa6, 0x40, 0x5d, 0xc7, 0x06, 0xe2, 0x7a, 0xa6, 0x08, 0xc9, 0x72, 0x71, 0x25, 0x17, 0xa5,
	0x26, 0x96, 0xa4, 0xa6, 0xc4, 0x27, 0x55, 0x4a, 0x30, 0x83, 0xe5, 0x38, 0xa1, 0x22, 0x4e, 0x95,
	0x46, 0xb3, 0x18, 0xb9, 0x58, 0xc1, 0xa6, 0x0b, 0x39, 0x73, 0x71, 0x21, 0x3c, 0x22, 0x24, 0xa9,
	0x07, 0x09, 0x08, 0x3d, 0x8c, 0x50, 0x90, 0x92, 0xc2, 0x26, 0x05, 0x75, 0x9a, 0x0f, 0x17, 0x2f,
	0x8a, 0x9b, 0x85, 0x64, 0x60, 0x8a, 0xb1, 0x79, 0x5c, 0x4a, 0x16, 0x87, 0x2c, 0xc4, 0x34, 0x27,
	0x8e, 0x28, 0x68, 0x74, 0x24, 0xb1, 0x81, 0x63, 0xc7, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xd5,
	0x8f, 0xf7, 0xe3, 0xac, 0x01, 0x00, 0x00,
}
