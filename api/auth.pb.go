// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth.proto

package modoki

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SignInRequest struct {
}

func (m *SignInRequest) Reset()                    { *m = SignInRequest{} }
func (m *SignInRequest) String() string            { return proto.CompactTextString(m) }
func (*SignInRequest) ProtoMessage()               {}
func (*SignInRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type SignInResponse struct {
	RedirectUri string `protobuf:"bytes,1,opt,name=redirect_uri,json=redirectUri" json:"redirect_uri,omitempty"`
}

func (m *SignInResponse) Reset()                    { *m = SignInResponse{} }
func (m *SignInResponse) String() string            { return proto.CompactTextString(m) }
func (*SignInResponse) ProtoMessage()               {}
func (*SignInResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *SignInResponse) GetRedirectUri() string {
	if m != nil {
		return m.RedirectUri
	}
	return ""
}

type SignOutRequest struct {
}

func (m *SignOutRequest) Reset()                    { *m = SignOutRequest{} }
func (m *SignOutRequest) String() string            { return proto.CompactTextString(m) }
func (*SignOutRequest) ProtoMessage()               {}
func (*SignOutRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type SignOutResponse struct {
}

func (m *SignOutResponse) Reset()                    { *m = SignOutResponse{} }
func (m *SignOutResponse) String() string            { return proto.CompactTextString(m) }
func (*SignOutResponse) ProtoMessage()               {}
func (*SignOutResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type CallbackRequest struct {
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	IdToken     string `protobuf:"bytes,2,opt,name=id_token,json=idToken" json:"id_token,omitempty"`
	State       string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
}

func (m *CallbackRequest) Reset()                    { *m = CallbackRequest{} }
func (m *CallbackRequest) String() string            { return proto.CompactTextString(m) }
func (*CallbackRequest) ProtoMessage()               {}
func (*CallbackRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *CallbackRequest) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *CallbackRequest) GetIdToken() string {
	if m != nil {
		return m.IdToken
	}
	return ""
}

func (m *CallbackRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type CallbackResponse struct {
}

func (m *CallbackResponse) Reset()                    { *m = CallbackResponse{} }
func (m *CallbackResponse) String() string            { return proto.CompactTextString(m) }
func (*CallbackResponse) ProtoMessage()               {}
func (*CallbackResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type IssueTokenRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *IssueTokenRequest) Reset()                    { *m = IssueTokenRequest{} }
func (m *IssueTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*IssueTokenRequest) ProtoMessage()               {}
func (*IssueTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *IssueTokenRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *IssueTokenRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type IssueTokenResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *IssueTokenResponse) Reset()                    { *m = IssueTokenResponse{} }
func (m *IssueTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*IssueTokenResponse) ProtoMessage()               {}
func (*IssueTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *IssueTokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*SignInRequest)(nil), "modoki.SignInRequest")
	proto.RegisterType((*SignInResponse)(nil), "modoki.SignInResponse")
	proto.RegisterType((*SignOutRequest)(nil), "modoki.SignOutRequest")
	proto.RegisterType((*SignOutResponse)(nil), "modoki.SignOutResponse")
	proto.RegisterType((*CallbackRequest)(nil), "modoki.CallbackRequest")
	proto.RegisterType((*CallbackResponse)(nil), "modoki.CallbackResponse")
	proto.RegisterType((*IssueTokenRequest)(nil), "modoki.IssueTokenRequest")
	proto.RegisterType((*IssueTokenResponse)(nil), "modoki.IssueTokenResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Authority service

type AuthorityClient interface {
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*SignOutResponse, error)
	Callback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*CallbackResponse, error)
	IssueToken(ctx context.Context, in *IssueTokenRequest, opts ...grpc.CallOption) (*IssueTokenResponse, error)
}

type authorityClient struct {
	cc *grpc.ClientConn
}

func NewAuthorityClient(cc *grpc.ClientConn) AuthorityClient {
	return &authorityClient{cc}
}

func (c *authorityClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := grpc.Invoke(ctx, "/modoki.Authority/SignIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*SignOutResponse, error) {
	out := new(SignOutResponse)
	err := grpc.Invoke(ctx, "/modoki.Authority/SignOut", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) Callback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*CallbackResponse, error) {
	out := new(CallbackResponse)
	err := grpc.Invoke(ctx, "/modoki.Authority/Callback", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) IssueToken(ctx context.Context, in *IssueTokenRequest, opts ...grpc.CallOption) (*IssueTokenResponse, error) {
	out := new(IssueTokenResponse)
	err := grpc.Invoke(ctx, "/modoki.Authority/IssueToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Authority service

type AuthorityServer interface {
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	SignOut(context.Context, *SignOutRequest) (*SignOutResponse, error)
	Callback(context.Context, *CallbackRequest) (*CallbackResponse, error)
	IssueToken(context.Context, *IssueTokenRequest) (*IssueTokenResponse, error)
}

func RegisterAuthorityServer(s *grpc.Server, srv AuthorityServer) {
	s.RegisterService(&_Authority_serviceDesc, srv)
}

func _Authority_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modoki.Authority/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modoki.Authority/SignOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).SignOut(ctx, req.(*SignOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_Callback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).Callback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modoki.Authority/Callback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).Callback(ctx, req.(*CallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_IssueToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).IssueToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modoki.Authority/IssueToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).IssueToken(ctx, req.(*IssueTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authority_serviceDesc = grpc.ServiceDesc{
	ServiceName: "modoki.Authority",
	HandlerType: (*AuthorityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _Authority_SignIn_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _Authority_SignOut_Handler,
		},
		{
			MethodName: "Callback",
			Handler:    _Authority_Callback_Handler,
		},
		{
			MethodName: "IssueToken",
			Handler:    _Authority_IssueToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x3d, 0x4f, 0x02, 0x41,
	0x10, 0x0d, 0x28, 0x5f, 0xe3, 0x07, 0x30, 0x41, 0x85, 0xab, 0x74, 0x2b, 0x63, 0x41, 0x21, 0x85,
	0x89, 0x09, 0x85, 0x52, 0x51, 0x99, 0xa0, 0x36, 0x36, 0x64, 0xb9, 0x9b, 0xc8, 0x06, 0xd8, 0xc5,
	0xfd, 0x88, 0xb1, 0xf7, 0x87, 0x1b, 0x6e, 0x77, 0xf9, 0xb4, 0xbb, 0x79, 0x6f, 0xde, 0x7b, 0xb7,
	0x2f, 0x03, 0xc0, 0x9d, 0x9d, 0x76, 0x97, 0x5a, 0x59, 0x85, 0xe5, 0x85, 0xca, 0xd4, 0x4c, 0xb0,
	0x3a, 0x9c, 0xbd, 0x8a, 0x4f, 0x39, 0x94, 0x23, 0xfa, 0x72, 0x64, 0x2c, 0xeb, 0xc1, 0x79, 0x04,
	0xcc, 0x52, 0x49, 0x43, 0x78, 0x03, 0xa7, 0x9a, 0x32, 0xa1, 0x29, 0xb5, 0x63, 0xa7, 0x45, 0xbb,
	0x70, 0x5d, 0xb8, 0xad, 0x8d, 0x4e, 0x22, 0xf6, 0xae, 0x05, 0x6b, 0x78, 0xd1, 0x8b, 0xb3, 0xd1,
	0xa6, 0x09, 0xf5, 0x35, 0xe2, 0x7d, 0x18, 0x41, 0x7d, 0xc0, 0xe7, 0xf3, 0x09, 0x4f, 0x67, 0x61,
	0x6b, 0x65, 0xcd, 0xd3, 0x94, 0x8c, 0x19, 0x5b, 0x35, 0x23, 0x19, 0xad, 0x3d, 0xf6, 0xb6, 0x82,
	0xb0, 0x03, 0x55, 0x91, 0x05, 0xba, 0x98, 0xd3, 0x15, 0x91, 0x79, 0xaa, 0x05, 0x25, 0x63, 0xb9,
	0xa5, 0xf6, 0x51, 0x8e, 0xfb, 0x81, 0x21, 0x34, 0x36, 0x31, 0x21, 0xba, 0x0f, 0xcd, 0xa1, 0x31,
	0x8e, 0x72, 0x5d, 0x0c, 0x6f, 0x41, 0x49, 0x7d, 0x4b, 0xd2, 0x21, 0xd5, 0x0f, 0x88, 0x70, 0x2c,
	0xf9, 0x82, 0x42, 0x56, 0xfe, 0xcd, 0xee, 0x00, 0xb7, 0xe5, 0xa1, 0x97, 0x16, 0x94, 0xb6, 0xff,
	0xda, 0x0f, 0xf7, 0xbf, 0x45, 0xa8, 0x3d, 0x39, 0x3b, 0x55, 0x5a, 0xd8, 0x1f, 0x7c, 0x80, 0xb2,
	0x6f, 0x13, 0x2f, 0xba, 0xbe, 0xf1, 0xee, 0x4e, 0xdd, 0xc9, 0xe5, 0x3e, 0x1c, 0xcc, 0x1f, 0xa1,
	0x12, 0xfa, 0xc3, 0x9d, 0x95, 0x4d, 0xc5, 0xc9, 0xd5, 0x01, 0x1e, 0xb4, 0x7d, 0xa8, 0xc6, 0x06,
	0x70, 0xbd, 0xb4, 0x57, 0x7d, 0xd2, 0x3e, 0x24, 0x82, 0x7c, 0x00, 0xb0, 0x79, 0x2d, 0x76, 0xe2,
	0xde, 0x41, 0x81, 0x49, 0xf2, 0x1f, 0xe5, 0x4d, 0x9e, 0xab, 0x1f, 0xe1, 0xc2, 0x26, 0xe5, 0xfc,
	0xe0, 0x7a, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xea, 0x5a, 0x71, 0x39, 0x7e, 0x02, 0x00, 0x00,
}
